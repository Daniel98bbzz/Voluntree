/* eslint-disable @next/next/no-img-element */
import Head from "next/head";
import Header from "../../public/Components/Header";
import Footer from "../../public/Components/Footer";
import jwt from "jsonwebtoken";
import Link from "next/link";

export async function getServerSideProps(context) {
  const { req } = context;
  const protocol = req.headers.referer
    ? req.headers.referer.split(":")[0]
    : "http";
  const host = req.headers.host;

  const hostUrl = `${protocol}://${host}`;

  try {
    const jwtSession = req.cookies.jwtSession;
    const userSession = jwt.decode(jwtSession);

    const userData = JSON.parse(JSON.stringify(userSession));

    try {
      const res = await fetch(
        `${hostUrl}/api/my-opportunities?user_id=${userData.id}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      const data = await res.json();
      return {
        props: {
          user: JSON.stringify(userSession) || "null",
          opportunitiesData: JSON.stringify(data) || [],
        },
      };
    } catch (error) {}

    return {
      props: {
        user: JSON.stringify(userSession) || "null",
      },
    };
  } catch (error) {
    return {
      props: {
        user: "null",
      },
    };
  }
}

export default function MyOpportunities({ user, opportunitiesData }) {
  let data;
  let opportunitiesDataValues;

  if (user != "null") {
    data = JSON.parse(user);
  }

  try {
    opportunitiesDataValues = JSON.parse(opportunitiesData);
  } catch (error) {
    opportunitiesDataValues = [];
  }

  return (
    <>
      <Head>
        <title>My Opportunities</title>
        <meta name="description" content="Generated by react" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Header />

        {/* Farmer */}
        {data && data.role && data.role == "farmer" && (
          <div style={{ margin: "100px 20px" }}>
            <h2 id="projectTitle">My Opportunities</h2>

            <div className="my-applications">
              {opportunitiesDataValues.myOpportunitiesData &&
              opportunitiesDataValues.myOpportunitiesData.length > 0 ? (
                opportunitiesDataValues.myOpportunitiesData.map((opp, i) => {
                  const totalRatings = opp.overview.reviews.length;
                  const sumRatings = opp.overview.reviews.reduce(
                    (sum, review) => {
                      return sum + parseFloat(review.rating);
                    },
                    0
                  );

                  const avgRatings =
                    totalRatings > 0
                      ? (sumRatings / totalRatings).toFixed(1)
                      : "N/A";
                  return (
                    <Link
                      passHref
                      href={`/opportunity/${opp._id}`}
                      key={i}
                      className="vol-application"
                    >
                      <img
                        alt="Image"
                        src={getImageSrc(opp.header_image)}
                        className=""
                      />

                      <div>
                        <h2 className="volunteer-title">{opp.title}</h2>
                        <div
                          style={{ marginTop: -5 }}
                          className="volunteer-rating"
                        >
                          <span className="rating">{avgRatings}</span>
                          <img
                            className="star"
                            src="/Images/svgs/star.svg"
                            alt="Star"
                          />
                          <span className="total-ratings">
                            ({totalRatings})
                          </span>
                        </div>

                        <div style={{ marginTop: 10 }}>
                          <p className="date">
                            Date:{" "}
                            {new Date(
                              opportunitiesDataValues.userFavoritesData[i].date
                            ).toLocaleDateString("en-GB")}
                          </p>
                        </div>
                      </div>

                      <svg
                        width="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5 12H19M5 12L11 6M5 12L11 18"
                          stroke="rgba(0,0,0,0.5)"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        />
                      </svg>
                    </Link>
                  );
                })
              ) : (
                <div>No opportunites found yet.</div>
              )}

              <Link
                className="add-service-button"
                style={{
                  textDecoration: "none",
                  width: "fit-content",
                  marginTop: 20,
                }}
                href={"/opportunity/add"}
              >
                Create New Opportunity
              </Link>
            </div>
          </div>
        )}

        <Footer volunteer={data && data.role == "volunteer"} />
      </main>
    </>
  );
}

function getImageSrc(headerImage) {
  // Check if headerImage starts with 'http://' or 'https://'
  if (/^https?:\/\//.test(headerImage)) {
    return headerImage;
  } else {
    return `/Images/${headerImage}`;
  }
}
