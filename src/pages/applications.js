/* eslint-disable @next/next/no-img-element */
import Head from "next/head";
import Header from "../../public/Components/Header";
import Footer from "../../public/Components/Footer";
import jwt from "jsonwebtoken";
import Link from "next/link";
import { useState } from "react";
import toast from "react-hot-toast";

export async function getServerSideProps(context) {
  const { req } = context;
  const protocol = req.headers.referer
    ? req.headers.referer.split(":")[0]
    : "http";
  const host = req.headers.host;

  const hostUrl = `${protocol}://${host}`;

  try {
    const jwtSession = req.cookies.jwtSession;
    const userSession = jwt.decode(jwtSession);

    const userData = JSON.parse(JSON.stringify(userSession));

    try {
      const res = await fetch(
        `${hostUrl}/api/applications?user_id=${userData.id}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      const data = await res.json();

      return {
        props: {
          user: JSON.stringify(userSession) || "null",
          applicationsData: JSON.stringify(data) || [],
        },
      };
    } catch (error) {}

    return {
      props: {
        user: JSON.stringify(userSession) || "null",
      },
    };
  } catch (error) {
    return {
      props: {
        user: "null",
      },
    };
  }
}

export default function Applications({ user, applicationsData }) {
  let data;
  let applicationsDataValues;

  if (user != "null") {
    data = JSON.parse(user);
  }

  try {
    applicationsDataValues = JSON.parse(applicationsData);
  } catch (error) {
    applicationsDataValues = [];
  }

  const [userApplications, setUserApplications] = useState(
    applicationsDataValues || []
  );

  async function setApplicationStatus(
    farmer_id,
    application_id,
    approve,
    volunteer_id
  ) {
    try {
      const res = await fetch(`/api/approve`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          farmer_id,
          application_id,
          approve,
          volunteer_id,
        }),
      });

      const data = await res.json();
    } catch (error) {}
  }

  const [volunteerIndex, setVolunteerIndex] = useState(-1); // -1 - Hidden

  async function rateOpportunity(reviewObj) {
    try {
      const res = await fetch("/api/review", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(reviewObj),
      });

      if (!res.ok) {
        throw new Error();
      }

      const responseData = await res.json();
    } catch (error) {
      throw new Error(error);
    }
  }

  return (
    <>
      <Head>
        <title>Applications</title>
        <meta name="description" content="Generated by react" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Header />
        {/* Volunteer */}
        {data && data.role && data.role == "volunteer" && (
          <div style={{ margin: "95px 20px" }}>
            <h2 id="projectTitle">My Applications</h2>

            <div className="my-applications">
              {userApplications.applicationsData &&
              userApplications.applicationsData.length > 0 ? (
                userApplications.applicationsData.map((application, i) => {
                  const totalRatings = application.overview.reviews.length;
                  const sumRatings = application.overview.reviews.reduce(
                    (sum, review) => {
                      return sum + parseFloat(review.rating);
                    },
                    0
                  );

                  const avgRatings =
                    totalRatings > 0
                      ? (sumRatings / totalRatings).toFixed(1)
                      : "N/A";
                  if (application != null)
                    return (
                      <Link
                        passHref
                        href={`/opportunity/${application._id}`}
                        key={i}
                        className="vol-application"
                      >
                        <img
                          alt="Image"
                          src={getImageSrc(application.header_image)}
                          className=""
                        />

                        <div>
                          <h2 className="volunteer-title">
                            {application.title}
                          </h2>
                          <div
                            style={{ marginTop: -5 }}
                            className="volunteer-rating"
                          >
                            <span className="rating">{avgRatings}</span>
                            <img
                              className="star"
                              src="/Images/svgs/star.svg"
                              alt="Star"
                            />
                            <span className="total-ratings">
                              ({totalRatings})
                            </span>
                          </div>

                          <p
                            style={{ margin: "7px 0" }}
                            className="total-ratings"
                          >
                            Date:{" "}
                            {new Date(
                              userApplications.userApplicationsData[i].date
                            ).toLocaleDateString("en-GB")}
                          </p>

                          <div style={{ marginTop: 13 }} className="flex">
                            <div
                              className={
                                userApplications.userApplicationsData[i]
                                  .approved == 2
                                  ? `approved`
                                  : userApplications.userApplicationsData[i]
                                      .approved == 1
                                  ? `declined`
                                  : "pending"
                              }
                            >
                              {userApplications.userApplicationsData[i]
                                .approved == 2
                                ? `Approved`
                                : userApplications.userApplicationsData[i]
                                    .approved == 1
                                ? `Status: Declined`
                                : `Status: Pending`}
                            </div>

                            {data.role == "volunteer" &&
                              userApplications.userApplicationsData[i]
                                .approved == 2 && (
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    e.preventDefault();
                                    setVolunteerIndex(i);
                                  }}
                                  className="declined"
                                >
                                  End Volunteering
                                </button>
                              )}
                          </div>
                        </div>

                        <svg
                          width="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M5 12H19M5 12L11 6M5 12L11 18"
                            stroke="rgba(0,0,0,0.5)"
                            strokeWidth="2"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                          />
                        </svg>
                      </Link>
                    );
                })
              ) : (
                <div>No applications found yet.</div>
              )}
            </div>
          </div>
        )}

        {/* Farmer */}
        {data && data.role && data.role == "farmer" && (
          <div style={{ margin: "105px 0px" }}>
            <div
              className="header-applications"
              style={{ margin: "0 20px 15px 20px" }}
            >
              <h2 style={{ margin: 0 }} id="projectTitle">
                My Requests
              </h2>
            </div>

            <div className="requests-list">
              {userApplications.userApplicationsData &&
              userApplications.userApplicationsData ? (
                userApplications.userApplicationsData
                  .reverse()
                  .map((application, i) => (
                    <div key={i} className="request-item">
                      <div style={{ width: "100%" }}>
                        <div>
                          <h4 style={{ fontWeight: 500, margin: "8px 0" }}>
                            {application.volunteer_username ?? "No Username"}
                          </h4>
                          <p className="date" style={{ marginBottom: "3px" }}>
                            Date:{" "}
                            {new Date(
                              userApplications.userApplicationsData[i].date
                            ).toLocaleDateString("en-GB")}
                          </p>

                          <p className="date" style={{ fontWeight: 500 }}>
                            Application: {application.title}
                          </p>
                        </div>

                        <div className="req-buttons">
                          {application.approved == 0 ? (
                            <>
                              <button
                                onClick={() => {
                                  setApplicationStatus(
                                    application.farmer_id,
                                    application._id,
                                    false,
                                    application.volunteer_id
                                  );
                                }}
                                className="decline"
                              >
                                Decline
                              </button>
                              <button
                                onClick={() => {
                                  setApplicationStatus(
                                    application.farmer_id,
                                    application._id,
                                    true,
                                    application.volunteer_id
                                  );
                                }}
                                className="accept"
                              >
                                Accept
                              </button>
                            </>
                          ) : application.approved == 1 ? (
                            <p className="declined">Status: Declined</p>
                          ) : (
                            application.approved == 2 && (
                              <p className="approved">Status: Approved</p>
                            )
                          )}
                        </div>
                      </div>
                    </div>
                  ))
              ) : (
                <div>No applications found yet.</div>
              )}
            </div>
          </div>
        )}

        {/* No User */}
        {!data && (
          <div style={{ margin: "95px 0px" }}>
            <h2 style={{ margin: "0 20px 15px 20px" }} id="projectTitle">
              You must be logged in to view this page.
            </h2>
          </div>
        )}

        <Footer volunteer={data && data.role == "volunteer"} />

        {volunteerIndex > -1 && (
          <RateVolunteer
            application={
              volunteerIndex > -1
                ? userApplications.applicationsData[volunteerIndex]
                : []
            }
            onClose={() => setVolunteerIndex(-1)}
            onRate={(review) => {
              const reviewObj = {
                ...review,
                id: userApplications.applicationsData[volunteerIndex]._id,
                user: data.username,
                user_id: data.id,
              };

              toast.promise(rateOpportunity(reviewObj), {
                loading: "Loading...",
                success: () => {
                  const updatedData =
                    userApplications.userApplicationsData.filter(
                      (item, i) => i !== volunteerIndex
                    );
                  const updatedApplicationsData =
                    userApplications.applicationsData.filter(
                      (item, i) => i !== volunteerIndex
                    );

                  setUserApplications({
                    applicationsData: updatedApplicationsData,

                    userApplicationsData: updatedData,
                  });

                  console.log(userApplications);
                  setVolunteerIndex(-1);
                  return "Volunteer completed successfully!";
                },
                error: "Error, Try Again",
              });
            }}
          />
        )}
      </main>
    </>
  );
}

const RateVolunteer = ({ application, onRate, onClose }) => {
  const [review, setReview] = useState({
    rating: 0,
    comment: "",
  });

  return (
    <div className="modal-body">
      <div className="modal-box">
        <svg
          viewBox="0 0 24 24"
          fill="none"
          onClick={() => onClose()}
          height={17}
          strokeWidth={0.75}
          stroke="black"
          className="icon_close"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g strokeWidth="0"></g>
          <g strokeLinecap="round" strokeLinejoin="round"></g>
          <g>
            {" "}
            <path
              d="M20.7457 3.32851C20.3552 2.93798 19.722 2.93798 19.3315 3.32851L12.0371 10.6229L4.74275 3.32851C4.35223 2.93798 3.71906 2.93798 3.32854 3.32851C2.93801 3.71903 2.93801 4.3522 3.32854 4.74272L10.6229 12.0371L3.32856 19.3314C2.93803 19.722 2.93803 20.3551 3.32856 20.7457C3.71908 21.1362 4.35225 21.1362 4.74277 20.7457L12.0371 13.4513L19.3315 20.7457C19.722 21.1362 20.3552 21.1362 20.7457 20.7457C21.1362 20.3551 21.1362 19.722 20.7457 19.3315L13.4513 12.0371L20.7457 4.74272C21.1362 4.3522 21.1362 3.71903 20.7457 3.32851Z"
              fill="#000"
            ></path>{" "}
          </g>
        </svg>

        <h3>End Volunteering</h3>
        <p>Rating: </p>

        <div style={{ marginTop: -10 }}>
          {Array.from({ length: 5 }, (_, i) => (
            <svg
              onClick={() => setReview({ ...review, rating: i + 1 })}
              key={i}
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill={review.rating > i ? "#000" : "none"}
              stroke="#000"
              strokeWidth={1.75}
              height={24}
            >
              <path d="M12 4 9.22 9.27 3 10.11l4.5 4.1L6.44 20 12 17.27 17.56 20l-1.06-5.79 4.5-4.1-6.22-.84z" />
            </svg>
          ))}
        </div>
        <p>Review: </p>
        <textarea
          placeholder="Leave a review..."
          value={review.comment}
          className="comment-textarea"
          onChange={(e) => setReview({ ...review, comment: e.target.value })}
        />

        <button
          onClick={() => {
            if (review.rating == 0) {
              toast.error("You must rate the opportunity");
            } else {
              onRate(review);
            }
          }}
          className="submit-rate-button"
        >
          Submit & End
        </button>
      </div>
    </div>
  );
};

function getImageSrc(headerImage) {
  // Check if headerImage starts with 'http://' or 'https://'
  if (/^https?:\/\//.test(headerImage)) {
    return headerImage;
  } else {
    return `/Images/${headerImage}`;
  }
}
