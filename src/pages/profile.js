<<<<<<< HEAD
import Head from "next/head";
import Header from "../../public/Components/Header";
import Footer from "../../public/Components/Footer";
import { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import jwt from "jsonwebtoken";

export async function getServerSideProps(context) {
  const { req } = context;
  
  try {
    const jwtSession = req.cookies.jwtSession;
    const userSession = jwt.decode(jwtSession);

    const userData = JSON.stringify(userSession);
    console.log(userData);

    if (userData == "null") {
      return {
        redirect: {
          destination: "/login",
          permanent: false,
        },
      };
    }
    return {
      props: {
        user: JSON.stringify(userSession) || "null",
      },
    };
  } catch (error) {
    return {
      props: {
        user: "null",
      },
    };
  }
}

export default function Login({ user }) {
  let userData;
  try {
    userData = JSON.parse(user);
  } catch (error) {}

  const router = useRouter();

  const logOut = async () => {
    const res = await fetch("/api/users/logout", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    });
    const data = await res.json();
    console.log(data);

    if (data.message) router.push("/login");
  };
  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by react" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Header />

        <div className="container-login">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="#3A8D2D"
            width={100}
          >
            <path
              fillRule="evenodd"
              d="M18.685 19.097A9.723 9.723 0 0 0 21.75 12c0-5.385-4.365-9.75-9.75-9.75S2.25 6.615 2.25 12a9.723 9.723 0 0 0 3.065 7.097A9.716 9.716 0 0 0 12 21.75a9.716 9.716 0 0 0 6.685-2.653Zm-12.54-1.285A7.486 7.486 0 0 1 12 15a7.486 7.486 0 0 1 5.855 2.812A8.224 8.224 0 0 1 12 20.25a8.224 8.224 0 0 1-5.855-2.438ZM15.75 9a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z"
              clipRule="evenodd"
            />
          </svg>

          <div className="profile-page">
            <h2>Profile</h2>
            <div className="divider" />

            <p>{userData.email}</p>
            <p style={{ textTransform: "capitalize" }}>{userData.role}</p>

            <button onClick={() => logOut()}>Log Out</button>
          </div>
        </div>
        <Footer />
      </main>
    </>
  );
}
=======
import React, { useState } from 'react';
import Header from "../../public/Components/Header";
import Footer from "../../public/Components/Footer";
import styles from "../styles/profilePage.module.css";

const ProfilePage = () => {
  const initialUser = {
    name: 'Gracia Tya',
    email: 'gracia@example.com',
    location: {
      city: 'Springfield',
      state: '', 
      country: ''
    },
    profilePicture: 'Images/farmer.jpg',
  };

  const [user, setUser] = useState(initialUser);
  const [editMode, setEditMode] = useState(false);
  const [editedUser, setEditedUser] = useState({ ...initialUser });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    if(name === "city" || name === "state" || name === "country") {
      setEditedUser({ 
        ...editedUser, 
        location: { ...editedUser.location, [name]: value }
      });
    } else {
      setEditedUser({ ...editedUser, [name]: value });
    }
  };

  const handleSave = () => {
    setUser({ ...editedUser });
    setEditMode(false);
  };

  const handleEdit = () => {
    setEditMode(true);
  };

  const handleCancelEdit = () => {
    setEditedUser({ ...user });
    setEditMode(false);
  };

  const handleLogout = () => {
    // Implement logout logic
  };

  const handleProfilePictureChange = (e) => {
    // Implement logic to handle profile picture change
  };

  return (
    <div className={styles.profileContainer}>
      <Header />
      <div className={styles.profileHeader}>
        <img src={user.profilePicture} alt="Profile" className={styles.profilePicture} />
        <>
          <div className={styles.fieldContainer}>
            <p className={styles.fieldDescription}>Name:</p>
            <input type="text" name="name" value={editMode ? editedUser.name : user.name} onChange={handleInputChange} className={styles.inputField} />
          </div>
          
          <div className={styles.fieldContainer}>
            <p className={styles.fieldDescription}>Email:</p>
            <input type="email" name="email" value={editMode ? editedUser.email : user.email} onChange={handleInputChange} className={styles.inputField} />
          </div>
          
          <div className={styles.fieldContainer}>
            <p className={styles.fieldDescription}>City:</p>
            <input type="text" name="city" value={editMode ? editedUser.location.city : user.location.city} onChange={handleInputChange} placeholder="City" className={styles.inputField} />
          </div>
          
          <div className={styles.fieldContainer}>
            <p className={styles.fieldDescription}>State/Province:</p>
            <input type="text" name="state" value={editMode ? editedUser.location.state : user.location.state} onChange={handleInputChange} placeholder="State/Province" className={styles.inputField} />
          </div>
          
          <div className={styles.fieldContainer}>
            <p className={styles.fieldDescription}>Country:</p>
            <input type="text" name="country" value={editMode ? editedUser.location.country : user.location.country} onChange={handleInputChange} placeholder="Country" className={styles.inputField} />
          </div>
          
          {/* Additional fields */}
          {editMode && (
            <>
              <div className={styles.fieldContainer}>
                <p className={styles.fieldDescription}>New Password:</p>
                <input type="password" name="password" placeholder="New Password" onChange={handleInputChange} className={styles.inputField} />
              </div>
              
              <div className={styles.fieldContainer}>
                <p className={styles.fieldDescription}>Date of Birth:</p>
                <input type="date" name="dateOfBirth" value={editedUser.dateOfBirth} onChange={handleInputChange} className={styles.inputField} />
              </div>
              
              <div className={styles.fieldContainer}>
                <p className={styles.fieldDescription}>Phone:</p>
                <input type="tel" name="phone" value={editedUser.phone} onChange={handleInputChange} className={styles.inputField} />
              </div>
            </>
          )}
          {/* Save and Cancel buttons */}
          {editMode ? (
            <div className={styles.buttonContainer}>
              <button onClick={handleSave} className={styles.button}>Save</button>
              <button onClick={handleCancelEdit} className={styles.button}>Cancel</button>
            </div>
          ) : (
            <div className={styles.buttonContainer}>
              <button onClick={handleEdit} className={styles.button}>Edit</button>
              <button onClick={handleLogout} className={styles.button}>Logout</button>
            </div>
          )}
        </>
      </div>
      <Footer />
    </div>
  );
};

export default ProfilePage;
>>>>>>> d04a06fe193db3ea6c8dd665e264f1bab460ebbe
